[
  {
    "id": "js-promises-basic-001",
    "topic": "JavaScript Promises",
    "quiz": {
      "id": "quiz-001",
      "topic": "JavaScript Promises",
      "questions": [
        {
          "type": "multiple-choice",
          "text": "What is the primary purpose of JavaScript Promises?",
          "difficulty": "basic",
          "explanation": "Promises are used to handle asynchronous operations in JavaScript, making it easier to manage callbacks and handle success/error cases.",
          "choices": [
            {
              "text": "To handle asynchronous operations",
              "isCorrect": true
            },
            {
              "text": "To store global variables",
              "isCorrect": false
            },
            {
              "text": "To create loops",
              "isCorrect": false
            },
            {
              "text": "To define functions",
              "isCorrect": false
            }
          ]
        },
        {
          "type": "multiple-choice",
          "text": "Which method is used to handle successful Promise resolution?",
          "difficulty": "basic",
          "explanation": "The .then() method is used to handle successful Promise resolution, allowing you to process the resolved value.",
          "choices": [
            {
              "text": ".then()",
              "isCorrect": true
            },
            {
              "text": ".finally()",
              "isCorrect": false
            },
            {
              "text": ".done()",
              "isCorrect": false
            },
            {
              "text": ".success()",
              "isCorrect": false
            }
          ]
        },
        {
          "type": "multiple-choice",
          "text": "What is the state of a Promise when it starts executing?",
          "difficulty": "intermediate",
          "explanation": "A Promise starts in the 'pending' state and then transitions to either 'fulfilled' or 'rejected'.",
          "choices": [
            {
              "text": "pending",
              "isCorrect": true
            },
            {
              "text": "fulfilled",
              "isCorrect": false
            },
            {
              "text": "rejected",
              "isCorrect": false
            },
            {
              "text": "settled",
              "isCorrect": false
            }
          ]
        },
        {
          "type": "coding",
          "text": "Create a Promise that resolves after a specified delay (in milliseconds). The Promise should resolve with the message 'Completed after [delay]ms'.",
          "difficulty": "basic",
          "explanation": "This tests understanding of Promise creation and setTimeout usage.",
          "solution": "function createDelayPromise(delay) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(`Completed after ${delay}ms`);\n    }, delay);\n  });\n}",
          "testCases": [
            {
              "input": "createDelayPromise(1000)",
              "expectedOutput": "Completed after 1000ms"
            },
            {
              "input": "createDelayPromise(500)",
              "expectedOutput": "Completed after 500ms"
            }
          ]
        },
        {
          "type": "coding",
          "text": "Implement a function that takes an array of Promises and returns a new Promise that resolves when all Promises are settled (either fulfilled or rejected). The function should return an array of objects containing the status and value/reason of each Promise.",
          "difficulty": "advanced",
          "explanation": "This tests understanding of Promise.allSettled() or implementing similar functionality manually.",
          "solution": "function handleAllSettled(promises) {\n  return Promise.all(\n    promises.map(p => p\n      .then(value => ({\n        status: 'fulfilled',\n        value\n      }))\n      .catch(reason => ({\n        status: 'rejected',\n        reason\n      }))\n    )\n  );\n}",
          "testCases": [
            {
              "input": "handleAllSettled([Promise.resolve(1), Promise.reject('error')])",
              "expectedOutput": "[{status:'fulfilled',value:1},{status:'rejected',reason:'error'}]"
            },
            {
              "input": "handleAllSettled([Promise.resolve('a'), Promise.resolve('b')])",
              "expectedOutput": "[{status:'fulfilled',value:'a'},{status:'fulfilled',value:'b'}]"
            }
          ]
        }
      ],
      "createdAt": "2024-04-06T10:00:00.000Z",
      "config": {
        "multipleChoiceCount": 3,
        "codingQuestionCount": 2,
        "difficultyDistribution": {
          "basic": 2,
          "intermediate": 2,
          "advanced": 1
        }
      },
      "metadata": {
        "difficulty": "intermediate",
        "totalQuestions": 5,
        "types": {
          "multipleChoice": 3,
          "coding": 2
        }
      }
    },
    "createdAt": "2024-04-06T10:00:00.000Z",
    "similarTopics": [
      "JavaScript Async/Await",
      "JavaScript Callbacks",
      "JavaScript Error Handling"
    ],
    "metadata": {
      "difficulty": "intermediate",
      "evaluationScore": 0.95
    }
  },
  {
    "id": "js-async-await-001",
    "topic": "JavaScript Async/Await",
    "quiz": {
      "id": "quiz-002",
      "topic": "JavaScript Async/Await",
      "questions": [
        {
          "type": "multiple-choice",
          "text": "What keyword is used to define an asynchronous function in JavaScript?",
          "difficulty": "basic",
          "explanation": "The 'async' keyword is used to define asynchronous functions that can use the 'await' keyword inside them.",
          "choices": [
            {
              "text": "async",
              "isCorrect": true
            },
            {
              "text": "await",
              "isCorrect": false
            },
            {
              "text": "promise",
              "isCorrect": false
            },
            {
              "text": "then",
              "isCorrect": false
            }
          ]
        },
        {
          "type": "multiple-choice",
          "text": "What happens when an async function is called?",
          "difficulty": "basic",
          "explanation": "Async functions always return a Promise, even if you return a non-Promise value.",
          "choices": [
            {
              "text": "It returns a Promise",
              "isCorrect": true
            },
            {
              "text": "It returns undefined",
              "isCorrect": false
            },
            {
              "text": "It returns null",
              "isCorrect": false
            },
            {
              "text": "It returns a callback",
              "isCorrect": false
            }
          ]
        },
        {
          "type": "multiple-choice",
          "text": "What is the purpose of the 'await' keyword?",
          "difficulty": "intermediate",
          "explanation": "The 'await' keyword pauses the execution of an async function until a Promise is resolved or rejected.",
          "choices": [
            {
              "text": "To pause execution until a Promise resolves",
              "isCorrect": true
            },
            {
              "text": "To create a new Promise",
              "isCorrect": false
            },
            {
              "text": "To handle errors",
              "isCorrect": false
            },
            {
              "text": "To define a callback",
              "isCorrect": false
            }
          ]
        },
        {
          "type": "coding",
          "text": "Create an async function that fetches data from two APIs sequentially and returns their combined result. Use the provided fetchData function that returns a Promise.",
          "difficulty": "basic",
          "explanation": "This tests understanding of async/await syntax and sequential Promise execution.",
          "solution": "async function fetchSequential(url1, url2) {\n  const data1 = await fetchData(url1);\n  const data2 = await fetchData(url2);\n  return { ...data1, ...data2 };\n}",
          "testCases": [
            {
              "input": "fetchSequential('api1', 'api2')",
              "expectedOutput": "{data1: 'result1', data2: 'result2'}"
            },
            {
              "input": "fetchSequential('users', 'posts')",
              "expectedOutput": "{users: [], posts: []}"
            }
          ]
        },
        {
          "type": "coding",
          "text": "Implement an async function that retries a failed operation a specified number of times with a delay between attempts.",
          "difficulty": "advanced",
          "explanation": "This tests understanding of async/await, error handling, and implementing retry logic.",
          "solution": "async function retryOperation(operation, maxAttempts, delay) {\n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await operation();\n    } catch (error) {\n      if (attempt === maxAttempts) throw error;\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n}",
          "testCases": [
            {
              "input": "retryOperation(() => Promise.reject('error'), 3, 1000)",
              "expectedOutput": "error"
            },
            {
              "input": "retryOperation(() => Promise.resolve('success'), 3, 1000)",
              "expectedOutput": "success"
            }
          ]
        }
      ],
      "createdAt": "2024-04-06T11:00:00.000Z",
      "config": {
        "multipleChoiceCount": 3,
        "codingQuestionCount": 2,
        "difficultyDistribution": {
          "basic": 2,
          "intermediate": 2,
          "advanced": 1
        }
      },
      "metadata": {
        "difficulty": "intermediate",
        "totalQuestions": 5,
        "types": {
          "multipleChoice": 3,
          "coding": 2
        }
      }
    },
    "createdAt": "2024-04-06T11:00:00.000Z",
    "similarTopics": [
      "JavaScript Promises",
      "JavaScript Error Handling",
      "JavaScript Fetch API"
    ],
    "metadata": {
      "difficulty": "intermediate",
      "evaluationScore": 0.92
    }
  }
] 